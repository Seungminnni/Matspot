import React from 'react';
import '../styles/KeywordFilter.css';

// ÏûÑÏãú Ïû•ÏÜå Ïú†Ìòï Î™©Î°ù (Ïù¥Î™®ÏßÄ Ï∂îÍ∞Ä)
const placeTypes = [
    { id: 'restaurant', name: 'ÏãùÎãπ', emoji: 'üçΩÔ∏è' },
    { id: 'cafe', name: 'Ïπ¥Ìéò', emoji: '‚òï' },
];

const KeywordFilter = ({ place, updatePlace, onSearch }) => {
    // ÌÇ§ÏõåÎìú Îß§Ìïë
    const keywordMap = {
        'western': 'ÏñëÏãù',
        'chinese': 'Ï§ëÏãù',
        'japanese': 'ÏùºÏãù',
        'korean': 'ÌïúÏãù',
        'dessert': 'ÎîîÏ†ÄÌä∏'
    };

    const keywords = [
        { id: 'western', name: 'ÏñëÏãù', emoji: 'üçù' },
        { id: 'chinese', name: 'Ï§ëÏãù', emoji: 'ü•¢' },
        { id: 'japanese', name: 'ÏùºÏãù', emoji: 'üç£' },
        { id: 'korean', name: 'ÌïúÏãù', emoji: 'üçö' },
        { id: 'dessert', name: 'ÎîîÏ†ÄÌä∏', emoji: 'üç∞' }
    ];

    // Ïû•ÏÜå Ïú†ÌòïÏóê Îî∞Î•∏ ÌÇ§ÏõåÎìú ÌïÑÌÑ∞ÎßÅ
    const getAvailableKeywords = () => {
        if (place.placeType === 'cafe') {
            // Ïπ¥ÌéòÏù∏ Í≤ΩÏö∞ ÎîîÏ†ÄÌä∏Îßå ÌëúÏãú
            return keywords.filter(keyword => keyword.id === 'dessert');
        } else if (place.placeType === 'restaurant') {
            // ÏãùÎãπÏù∏ Í≤ΩÏö∞ ÎîîÏ†ÄÌä∏ Ï†úÏô∏ÌïòÍ≥† ÌëúÏãú
            return keywords.filter(keyword => keyword.id !== 'dessert');
        } else {
            // Ïû•ÏÜå Ïú†ÌòïÏù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Î™®Îì† ÌÇ§ÏõåÎìú ÌëúÏãú
            return keywords;
        }
    };

    const sortOptions = [
        { id: 'distance', name: 'Í±∞Î¶¨Ïàú', emoji: 'üìç' },
        { id: 'sns', name: 'SNS Ïù∏Í∏∞Ïàú', emoji: 'üì±' },
        { id: 'rating', name: 'Î¶¨Î∑∞Ïàò', emoji: 'üìù' }
    ];

    // Ïû•ÏÜå Ïú†Ìòï Î≥ÄÍ≤Ω Ìï®Ïàò
    const handlePlaceTypeChange = (type) => {
        // Ïû•ÏÜå Ïú†Ìòï Î≥ÄÍ≤Ω Ïãú ÌÇ§ÏõåÎìú ÏûêÎèô Ï°∞Ï†ï
        let newKeywords = [];
        
        if (type === 'cafe') {
            // Ïπ¥Ìéò ÏÑ†ÌÉù Ïãú ÎîîÏ†ÄÌä∏ ÏûêÎèô ÏÑ†ÌÉù (Ïù¥ÎØ∏ ÎîîÏ†ÄÌä∏Í∞Ä ÏÑ†ÌÉùÎêòÏñ¥ ÏûàÎã§Î©¥ Ïú†ÏßÄ)
            if (place.selectedKeywords.includes('dessert')) {
                newKeywords = ['dessert'];
            } else {
                newKeywords = ['dessert']; // ÎîîÏ†ÄÌä∏ ÏûêÎèô ÏÑ†ÌÉù
            }
        } else if (type === 'restaurant') {
            // ÏãùÎãπ ÏÑ†ÌÉù Ïãú ÎîîÏ†ÄÌä∏Í∞Ä ÏÑ†ÌÉùÎêòÏñ¥ ÏûàÎã§Î©¥ Ï†úÍ±∞
            newKeywords = place.selectedKeywords.filter(keyword => keyword !== 'dessert');
        } else {
            // Ïû•ÏÜå Ïú†Ìòï Ìï¥Ï†ú Ïãú Í∏∞Ï°¥ ÌÇ§ÏõåÎìú Ïú†ÏßÄ
            newKeywords = place.selectedKeywords;
        }
        
        updatePlace(place.id, { 
            placeType: type,
            selectedKeywords: newKeywords
        });
    };

    // ÌÇ§ÏõåÎìú1 Îã®Ïùº ÏÑ†ÌÉù Ìï®Ïàò (Ï§ëÎ≥µ ÏÑ†ÌÉù Î∂àÍ∞Ä)
    const selectKeyword = (keywordId) => {
        // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú ÌÇ§ÏõåÎìúÎ•º Îã§Ïãú ÌÅ¥Î¶≠ÌïòÎ©¥ ÏÑ†ÌÉù Ìï¥Ï†ú, Îã§Î•∏ ÌÇ§ÏõåÎìú ÌÅ¥Î¶≠ÌïòÎ©¥ Îã®Ïùº ÏÑ†ÌÉù
        const newKeywords = place.selectedKeywords.includes(keywordId) 
            ? [] 
            : [keywordId];
        updatePlace(place.id, { selectedKeywords: newKeywords });
    };

    // ÌÇ§ÏõåÎìú2 ÏÑ†ÌÉù Ìï®Ïàò
    const selectSortOption = (optionId) => {
        updatePlace(place.id, { selectedSortOption: optionId });
    };

    return (
        <div className="filters-container">
            <div className="filter-group">
                <h3 className="group-number-heading">{place.name}</h3>

                <div className="filter-section-wrapper">
                    <div className="place-type-filter">
                         <h4 className="section-title">Ïû•ÏÜå Ïú†Ìòï</h4>
                         <div className="keyword-grid">
                            {placeTypes.map(type => (
                                <button
                                    key={type.id}
                                    className={`keyword-button ${place.placeType === type.id ? 'selected' : ''}`}
                                    onClick={() => handlePlaceTypeChange(type.id)}
                                >
                                    {type.emoji && <span className="keyword-emoji">{type.emoji}</span>}
                                    <span className="keyword-name">{type.name}</span>
                                </button>
                            ))}
                         </div>
                    </div>

                    <div className="keyword-filter">
                        <h4 className="section-title">ÌÇ§ÏõåÎìú 1 (ÏùåÏãù Ï¢ÖÎ•ò)</h4>
                        <div className="keyword-grid">
                            {getAvailableKeywords().map(keyword => (
                                <button
                                    key={keyword.id}
                                    className={`keyword-button ${place.selectedKeywords.includes(keyword.id) ? 'selected' : ''}`}
                                    onClick={() => selectKeyword(keyword.id)}
                                >
                                    {keyword.emoji && <span className="keyword-emoji">{keyword.emoji}</span>}
                                    <span className="keyword-name">{keyword.name}</span>
                                </button>
                            ))}
                        </div>
                    </div>

                    <div className="sort-filter">
                       <h4 className="section-title">ÌÇ§ÏõåÎìú 2 (Ï†ïÎ†¨)</h4>
                       <div className="sort-options">
                           {sortOptions.map(option => (
                               <button
                                   key={option.id}
                                   className={`sort-button ${place.selectedSortOption === option.id ? 'selected' : ''}`}
                                   onClick={() => selectSortOption(option.id)}
                               >
                                   <span className="keyword-emoji">{option.emoji}</span>
                                   <span className="keyword-name">{option.name}</span>
                               </button>
                           ))}
                       </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default KeywordFilter;